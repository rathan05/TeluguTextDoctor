# -*- coding: utf-8 -*-
"""SpellingCorrection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TMLk7z9O_-fxVLvtSNG6YvbeKXiSHdsj

#**Spelling correction for Telugu Language**

##**Reading data from corpus1**
"""

arr = []
with open("./corpus1.txt",encoding="utf-8") as f:
    for line in f:
        temp = line.strip("\n")
        arr.append(temp)



# from google.colab import drive
# drive.mount('/content/drive')

arr

len(arr)

"""##**removing duplicates**"""

arr = set(arr)
arr = list(arr)

len(arr)

"""##**Indexing the preprocessed data**

###**generate Ngrams for a word**
"""

def generateNGrams(n,word):
    nGrams=[]
    i = 0
    size = len(word)
    while((i+n-1)<size):
        nGrams.append(word[i:i+n])
        i+=1
    return nGrams

"""###**Creating Ngram index**"""

def creatNIndex(n,vocabulary):
    nIndex = dict()
    for word in vocabulary:
        Ngrams=generateNGrams(n,word)
        for gram in Ngrams:
            if(nIndex.get(gram)==None):
                nIndex[gram]=[word]
            else:
                tlist=nIndex[gram]
                tlist.append(word)
                nIndex[gram]=tlist
    return nIndex

n=3

Nindex=creatNIndex(n,arr)

Nindex

len(Nindex.keys())

Nindex.keys()

# Nindex.get("పాల")[1:10]

"""#**Taking a input a word**"""

# word = "అంకకాండ"

"""#**validating the word**"""

def checkSpelling(word,ary):
    print ("checking word .... " + word)
    for str in ary:
        if (str==word):
            return True
    return False

# checkSpelling(word,arr)

"""#**generating suggested posting list from the trigram index**"""

def generateSuggestedList(word,Nindex,n):
    size=len(word)
    i=0
    slist=[]
    while((i+n-1)<size):
        bg=word[i:i+n]
        poslist=Nindex.get(bg)
        if(poslist!=None):
            poslist=list(set(poslist))
            slist.append(poslist)
        i+=1
    return slist

# slist=generateSuggestedList(word,Nindex,3)

# slist

"""#**ranking the possible words and generating the correct word**"""

def lengthCof(word1,word2):
    len1=len(word1)
    len2=len(word2)
    if(len1>len2):
        k=((len2/len1))
        return k
    else:
        k=((len1/len2))
        return k

def ranking(word,slist):
    
    # lCoefficient=len(word)
    
    ranks=dict()
    
    for list in slist:
        for str in list:
            freq=ranks.get(str)
            if(freq==None):
                ranks[str]=1
            else:
                ranks[str]=freq+1
    
    sortRanks=sorted(ranks.items(), key=lambda x:x[1],reverse=True)
    
    sortRanks=dict(sortRanks[0:10])
    
    for key in sortRanks.keys():
        freq = sortRanks.get(key)
        lengthscore=lengthCof(word,key)
      
        score = freq + lengthscore
        sortRanks[key]=score
   
    sortRanks=sorted(sortRanks.items(), key=lambda x:x[1],reverse=True)   
   
    sortRanks=dict(sortRanks)
   
    return sortRanks

# ranks=ranking(word,slist)

# ranks

"""#**Refining the result**"""

def refine1(word,ranks):
    for key in ranks.keys():
        freq=0
        if(word[0]==key[0]):
            freq=1
        score = freq + ranks.get(key)
        ranks[key]=score
        sortedRanks=sorted(ranks.items(), key=lambda x:x[1],reverse=True)
    sortedRanks=dict(sortedRanks)
    # print(sortedRanks)
    return sortedRanks

def refine2(word,ranks):
    len1=len(word)
    for key in ranks.keys():
        len2=len(key)
        freq=0
        if(word[len1-1]==key[len2-1]):
            freq=1
        score = freq + ranks.get(key)
        ranks[key]=score
        sortedRanks=sorted(ranks.items(), key=lambda x:x[1],reverse=True)
    sortedRanks=dict(sortedRanks)
    return sortedRanks

# refine1(word,ranks)

"""#**Evaluation: calculating accuracy of the model**

## 1 or 2 edit distance errors
"""

list2 = ['అండకోశము','అంటుమెడ','అంతఃకరణము','అంతము','అంతరాత్మ','అంతరాయం','అంతరాయము','ఎదురుపాటు','ఎదురుమోయు', 'ఎదురేగు','ఓష్ట','ఓసరింత','ఓసరిల్లు','ఓసరు','ఓహటము','కముంజూ','కముచు','కముడి','కముడివీడిచె','కమునకు','కలిగొట్టు','కలితనము','కలితము','కలిద్రుమము','కలిపి','కుథము','కుదండంబు','కుదప', 'కుదరము','కుదించు','ఖండీరము','ఖండువా','ఖందడముకానిది','ఖందితము','ఖందీరము','చేలువడి','చేలువమిరియము','చేల్లకము','చేల్లగడ్డ','చేల్లడము','టాటోటు', 'టాటోటుకాండు','టాడా','టాడింపక','దృశ్యం','దృశ్యత','దెచ్చెదమునీకు','దెజవమేను','దెప్పరించు','దెప్పరిల్లు','ఫాలనేత్రుండు',]

list1 = ['అండకోశమ','అంటుమె','అంతఃకరణమ','అంతమ','అంతరాత్', 'అంతరాయ', 'అంతరాయమ','ఎదురుపటు', 'ఎదురుమోయ', 'ఎదురేగ','ఓష్', 'ఓసరిం', 'ఓసరిల్ల', 'ఓసర', 'ఓహటమ', 'కముంజ', 'కముచ', 'కముడ', 'కముడివడిచె', 'కమునక','కలిగొట్ట', 'కలితనమ', 'కలితమ', 'కలిద్రమము', 'కలిప','కుథమ', 'కుదండంబ', 'కుద', 'కదరము', 'కుదించ','ఖండీరమ', 'ఖండువ', 'ఖందడమకానిది', 'ఖందితమ', 'ఖందీరమ','చేలువడ', 'చేలువమిరియమ', 'చేల్లకమ', 'చేల్గడ్డ', 'చేల్లడమ','టాటోట', 'టాటోటుకాండ', 'టాడ', 'టాడిపక','దృశ్య', 'దృశ్య', 'దెచ్చెదమునీక', 'దెజవమేన', 'దెప్పరించ', 'దెప్పరిలలు','ఫాలనేత్రుడు']

"""## 2 to 4 edit distance errors"""

list4 = ['అండకోశము','అంటుమెడ','అంతఃకరణము','అంతము','అంతరాత్మ','అంతరాయం','అంతరాయము','ఎదురుపాటు','ఎదురుమోయు', 'ఎదురేగు','ఓష్ట','ఓసరింత','ఓసరిల్లు','ఓసరు','ఓహటము','కముంజూ','కముచు','కముడి','కముడివీడిచె','కమునకు','కలిగొట్టు','కలితనము','కలితము','కలిద్రుమము','కలిపి','కుథము','కుదండంబు','కుదప', 'కుదరము','కుదించు','ఖండీరము','ఖండువా','ఖందడముకానిది','ఖందితము','ఖందీరము','చేలువడి','చేలువమిరియము','చేల్లకము','చేల్లగడ్డ','చేల్లడము','టాటోటు', 'టాటోటుకాండు','టాడా','టాడింపక','దృశ్యం','దృశ్యత','దెచ్చెదమునీకు','దెజవమేను','దెప్పరించు','దెప్పరిల్లు','ఫాలనేత్రుండు',]

list3 = ['అండకోశ','అంటుమ','అంతకరణమ','అంత','అంతరత', 'అంతరయ', 'అంతరయమ','ఎదురుపట', 'ఎదురుమో', 'ఎదురేగ','ఓష్', 'ఓసరి', 'ఓసరిల్', 'ఓసర', 'ఓహటమ', 'కముం', 'కముచ', 'కముడ', 'కముడివడి', 'కమునక','కలిగొట', 'కలితనమ', 'కలితమ', 'కలిద్రమ', 'కలిప','కుథమ', 'కుదండం', 'కుద', 'కదరము', 'కుదించ','ఖండీర', 'ఖండువ', 'ఖందడమకానిద', 'ఖందితమ', 'ఖందీర','చేలువడ', 'చేలువమిరియమ', 'చేల్లకమ', 'చేల్గడ్', 'చేల్లడమ','టాటోట', 'టాటోటుకాం', 'టాడ', 'టాడిపక','దృశ్య', 'దృశ్య', 'దెచ్చెదమునీ', 'దెజవమేన', 'దెప్పరిం', 'దెప్పరిలల','ఫాలనేత్రుడ']

def findPrecision(list1,list2):
    size = len(list1)
    i=0
    matched = 0
    while (i<size):
        slist = generateSuggestedList(list1[i],Nindex,n)
        crtedword = ranking(list1[i],slist); 
        if(crtedword==list2[i]):
            matched=matched + 1
        i=i+1
    return ("----------accuracy is: " + str(matched/size))

findPrecision(list1,list2)

"""# CLI """

word=input("enter the word")
status=checkSpelling(word,arr)

if (status == True):
  print("Entered word in fine")
else:
  slist=generateSuggestedList(word,Nindex,n)
  ranks=ranking(word,slist)
  print("suggested words and their score are:")
  print(ranks)
  print("Not satisfied with ranks(yes/no)?")
  feedback=input("")
  if(feedback.lower()=="yes"):
    print("Are you confident with the first letter? (enter 1)")
    print("Are you confident with the last letter? (enter any)")
    num = int(input())
    if(num==1):
      print(refine1(word,ranks))
    else:
      print(refine2(word,ranks))
  else:
    print("thank you :)")

len("కకాండు")

"""# Contribution

*   ## Data collection and preprocessing 
*   ## Indexing
*   ## Validating and Retrieving posting list
*   ## Ranking and Retrieving correct word (similarity coefficient)
*   ## Evaluation

# Modification for end

*   ## collecing data from folder of files in data collection diversifying database
*   ## variable indexing of n gram
*   ## validating word and retrieving posting lists
*   ## ranking and retrieving correct word (improved combiniing with the length coefficient)
*   ## Evaluation (evalutation for different size of n in ngram indexing)










"""
